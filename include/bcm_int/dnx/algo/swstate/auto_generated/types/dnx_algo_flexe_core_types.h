/** \file algo/swstate/auto_generated/types/dnx_algo_flexe_core_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_ALGO_FLEXE_CORE_TYPES_H__
#define __DNX_ALGO_FLEXE_CORE_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/port/flexe/flexe_core.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_nif.h>
#include <soc/dnxc/swstate/callbacks/sw_state_ll_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_linked_list.h>
/*
 * STRUCTs
 */

typedef struct {
    dnx_algo_res_t mux_lphy;
    dnx_algo_res_t demux_lphy;
    dnx_algo_res_t mac_timeslot;
    dnx_algo_res_t sar_rx_timeslot;
    dnx_algo_res_t sar_tx_timeslot;
    dnx_algo_res_t rateadpt_timeslot;
    dnx_algo_res_t instance;
} dnx_algo_flexe_core_resource_alloc_t;

typedef struct {
    SHR_BITDCL timeslot_bitmap[((DNX_DATA_MAX_NIF_MAC_CLIENT_NOF_MAC_TIMESLOTS)/SHR_BITWID)+1];
} dnx_algo_flexe_core_mac_channel_info_t;

typedef struct {
    SHR_BITDCL rx_timeslot_bitmap[((DNX_DATA_MAX_NIF_SAR_CLIENT_NOF_SAR_TIMESLOTS)/SHR_BITWID)+1];
    SHR_BITDCL tx_timeslot_bitmap[((DNX_DATA_MAX_NIF_SAR_CLIENT_NOF_SAR_TIMESLOTS)/SHR_BITWID)+1];
    int rx_cell_mode;
    int tx_cell_mode;
} dnx_algo_flexe_core_sar_channel_info_t;

typedef struct {
    SHR_BITDCL timeslot_bitmap[((DNX_DATA_MAX_NIF_FLEXE_MAX_NOF_SLOTS)/SHR_BITWID)+1];
    bcm_port_flexe_phy_slot_mode_t rx_slot_mode;
    bcm_port_flexe_phy_slot_mode_t tx_slot_mode;
} dnx_algo_flexe_core_channel_info_t;

typedef struct {
    int group;
    int logical_phy_id;
    int phy_speed;
    int serdes_rate;
    int instance;
    int nof_instances;
    SHR_BITDCL mux_lphy_bitmap[((DNX_DATA_MAX_NIF_FLEXE_NOF_FLEXE_LPHYS)/SHR_BITWID)+1];
    SHR_BITDCL demux_lphy_bitmap[((DNX_DATA_MAX_NIF_FLEXE_NOF_FLEXE_LPHYS)/SHR_BITWID)+1];
    int is_100g;
    int is_bypass;
    int is_am_transparent;
} dnx_algo_flexe_core_port_info_t;

typedef struct {
    sw_state_sorted_ll_t flexe_ports;
    sw_state_ll_t clients_rx;
    sw_state_ll_t clients_tx;
} dnx_algo_flexe_core_group_info_t;

typedef struct {
    flexe_core_dispatch_type_t drv_type;
    dnx_algo_flexe_core_resource_alloc_t resource_alloc;
    dnx_algo_flexe_core_group_info_t* group;
    dnx_algo_flexe_core_port_info_t* port;
    dnx_algo_flexe_core_mac_channel_info_t* mac_client;
    dnx_algo_flexe_core_sar_channel_info_t* sar_client;
    dnx_algo_flexe_core_channel_info_t* flexe_client;
} dnx_algo_flexe_core_db_t;


#endif /* __DNX_ALGO_FLEXE_CORE_TYPES_H__ */
