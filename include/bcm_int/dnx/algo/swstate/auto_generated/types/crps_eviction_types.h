/** \file algo/swstate/auto_generated/types/crps_eviction_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __CRPS_EVICTION_TYPES_H__
#define __CRPS_EVICTION_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <include/bcm/stat.h>
#include <include/bcm/types.h>
#include <include/shared/shr_thread_manager.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_crps.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_max_crps.h>
#include <soc/dnxc/swstate/types/sw_state_mutex.h>
/*
 * STRUCTs
 */

typedef struct {
    uint64 cnt1;
    uint64 cnt2;
    uint32 counter_entry;
    uint32 engine_id;
    uint32 core_id;
    bcm_stat_counter_format_type_t format;
    uint8 is_seq_record;
} dnx_crps_eviction_ctr_result_t;

typedef struct {
    uint32 nof_counters;
    dnx_crps_eviction_ctr_result_t* cnt_result;
} dnx_crps_eviction_ctr_result_arr_t;

typedef struct {
    shr_thread_manager_handler_t crps_eviction_thread_handler;
} dnx_crps_eviction_bg_thread_data_t;

typedef struct {
    sw_state_mutex_t cache_lock;
    sw_state_mutex_t fifo_lock;
    int fifo_channels[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_DATA_MAX_CRPS_EVICTION_NOF_COUNTERS_FIFO];
    dnx_crps_eviction_ctr_result_arr_t fifo_results;
    dnx_crps_eviction_bg_thread_data_t bg_thread_data;
} dnx_crps_eviction_db_t;


#endif /* __CRPS_EVICTION_TYPES_H__ */
