/** \file algo/swstate/auto_generated/types/dnx_ingress_congestion_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_INGRESS_CONGESTION_TYPES_H__
#define __DNX_INGRESS_CONGESTION_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/port/algo_port_mgmt.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/cosq/cosq.h>
#include <bcm_int/dnx/cosq/ingress/ingress_congestion.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_ingr_congestion.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_port.h>
#include <soc/dnxc/swstate/types/sw_state_mutex.h>
/*
 * STRUCTs
 */

typedef struct {
    uint32 voq_guaranteed[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_INGRESS_CONGESTION_RESOURCE_NOF];
    uint32 vsq_guaranteed[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_INGRESS_CONGESTION_RESOURCE_NOF];
} dnx_ingress_congestion_guaranteed_t;

typedef struct {
    uint32** ref_count;
    uint32* is_created;
} dnx_ingress_congestion_voq_rate_class_info_t;

typedef struct {
    int src_port;
} dnx_ingress_congestion_vsq_f_mapping_info_t;

typedef struct {
    int src_port;
} dnx_ingress_congestion_vsq_e_mapping_info_t;

typedef struct {
    dnx_ingress_congestion_vsq_e_mapping_info_t* vsq_e_mapping;
    dnx_ingress_congestion_vsq_f_mapping_info_t* vsq_f_mapping;
    int lossless_pool_id;
} dnx_ingress_congestion_pb_vsq_info_t;

typedef struct {
    dnx_algo_res_t* vsqe_id;
    dnx_algo_res_t* vsqf_id;
} dnx_ingress_congestion_res_mngr_t;

typedef struct {
    dnx_algo_template_t vsq_rate_cls_a_c[3];
    dnx_algo_template_t* vsq_rate_cls_d;
    dnx_algo_template_t* vsq_rate_cls_source_port;
    dnx_algo_template_t* vsq_rate_cls_pg;
} dnx_ingress_congestion_rate_class_template_t;

typedef struct {
    bcm_cosq_fadt_threshold_t dram_bound_thresholds[DNX_INGRESS_CONGESTION_DRAM_BOUND_RESOURCE_NOF];
    bcm_cosq_fadt_threshold_t dram_recovery_fail_thresholds[DNX_INGRESS_CONGESTION_DRAM_BOUND_RESOURCE_NOF];
    uint32 dram_recovery_threshold;
} dnx_cosq_ingress_dram_thresholds_t;

typedef struct {
    bcm_cosq_fadt_threshold_t dp[DNX_COSQ_NOF_DP];
} dnx_cosq_ingress_fadt_tail_drop_thresholds_per_resource_t;

typedef struct {
    dnx_cosq_ingress_fadt_tail_drop_thresholds_per_resource_t resource[DNX_INGRESS_CONGESTION_RESOURCE_NOF];
} dnx_cosq_ingress_fadt_tail_drop_thresholds_t;

typedef struct {
    sw_state_mutex_t dram_bound_mutex;
    sw_state_mutex_t fadt_mutex;
    int dram_in_use;
} dnx_cosq_ingress_sync_manager_t;

typedef struct {
    uint32 shared_size_max[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_DATA_MAX_INGR_CONGESTION_VSQ_POOL_NOF];
    uint32 guaranteed_size_max[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES][DNX_DATA_MAX_INGR_CONGESTION_VSQ_POOL_NOF];
    uint32 headroom_size_max[DNX_DATA_MAX_DEVICE_GENERAL_NOF_CORES];
} dnx_cosq_ingress_congestion_gl_vsq_occupancy_info_t;

typedef struct {
    dnx_ingress_congestion_voq_rate_class_info_t voq_rate_class;
    dnx_ingress_congestion_guaranteed_t guaranteed;
    dnx_ingress_congestion_pb_vsq_info_t* port_based_vsq;
    int pg_numq[SOC_MAX_NUM_PORTS];
    dnx_ingress_congestion_res_mngr_t algo_res;
    dnx_ingress_congestion_rate_class_template_t vsq_rate_class;
    dnx_algo_template_t* vsq_pg_tc_mapping;
    dnx_cosq_ingress_dram_thresholds_t* dram_thresholds;
    dnx_cosq_ingress_fadt_tail_drop_thresholds_t* fadt_tail_drop_thresholds;
    dnx_cosq_ingress_sync_manager_t sync_manager;
    dnx_cosq_ingress_congestion_gl_vsq_occupancy_info_t global_vsq_occupancy;
} dnx_ingress_congestion_db_t;


#endif /* __DNX_INGRESS_CONGESTION_TYPES_H__ */
