/** \file algo/swstate/auto_generated/types/algo_consistent_hashing_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __ALGO_CONSISTENT_HASHING_TYPES_H__
#define __ALGO_CONSISTENT_HASHING_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/consistent_hashing/consistent_hashing_manager.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_defragmented_chunk.h>
/*
 * MACROs
 */

#define DNX_ALGO_CONSISTENT_HASHING_MAX_NOF_INSTANCES 3

#define DNX_ALGO_CONSISTENT_HASHING_MAX_TEMPLATE_MNGR_HANDLE_LENGTH DNX_ALGO_TEMPLATE_MNGR_MAX_NAME_LENGTH

/*
 * ENUMs
 */

typedef enum {
    CONSISTENT_MANAGER_INVALID = -1,
    L3_ECMP_CONSISTENT_MANAGER = 0,
    CHM_UNIT_TEST_1 = 1,
    CHM_UNIT_TEST_2 = 2,
    CHM_UNIT_TEST_3 = 3,
    CHM_UNIT_TEST_4 = 4,
    CHM_UNIT_TEST_5 = 5,
    CHM_UNIT_TEST_6 = 6,
    CHM_UNIT_TEST_7 = 7,
    TRUNK_CHM = 8,
    CONSISTENT_MANAGER_COUNT,
    /**
     * dummy enum field, must be the last
     */
    DNX_CONSISTENT_HASHING_E_DUMMY
} dnx_consistent_hashing_e;

/*
 * STRUCTs
 */

typedef struct {
    int profile_type;
    uint32 max_nof_elements_in_profile;
    uint32 consecutive_profiles;
    uint32 hierarchy;
    uint32 unique_identifyer;
} dnx_algo_consistent_hashing_manager_template_manager_key_t;

typedef struct {
    char name[DNX_ALGO_CONSISTENT_HASHING_MAX_TEMPLATE_MNGR_HANDLE_LENGTH];
} template_mngr_handle_t;

typedef struct {
    sw_state_defragmented_chunk_t* def_chunk;
    uint32* profile_to_offset_map;
    uint32 nof_hierarchies;
    uint32 bank_size;
    int* offset_to_profile_map;
    template_mngr_handle_t template_mngr_handle;
    consistent_hashing_cbs_t cbs;
} consistent_hashing_instance_t;

typedef struct {
    SHR_BITDCL occupied_bmp[((DNX_ALGO_CONSISTENT_HASHING_MAX_NOF_INSTANCES)/SHR_BITWID)+1];
    dnx_algo_template_t chm_templates[CONSISTENT_MANAGER_COUNT];
    consistent_hashing_instance_t ch_instance_array[DNX_ALGO_CONSISTENT_HASHING_MAX_NOF_INSTANCES];
} consistent_hashing_manager_t;


#endif /* __ALGO_CONSISTENT_HASHING_TYPES_H__ */
