/** \file algo/swstate/auto_generated/types/dnx_algo_port_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_ALGO_PORT_TYPES_H__
#define __DNX_ALGO_PORT_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm/port.h>
#include <bcm_int/dnx/algo/port/algo_port_mgmt.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <soc/dnx/dnx_data/auto_generated/dnx_data_nif.h>
#include <soc/dnxc/swstate/types/sw_state_mutex.h>
#include <soc/dnxc/swstate/types/sw_state_pbmp.h>
/*
 * ENUMs
 */

typedef enum {
    DNX_ALGO_PORT_STATE_INVALID = 0,
    DNX_ALGO_PORT_STATE_ADDED = 1,
    DNX_ALGO_PORT_STATE_REMOVED = 2,
    DNX_ALGO_PORT_STATE_VALID = 3,
    /**
     * dummy enum field, must be the last
     */
    DNX_ALGO_PORT_STATE_E_DUMMY
} dnx_algo_port_state_e;

/*
 * STRUCTs
 */

typedef struct {
    int h0;
    int h1;
} dnx_algo_port_db_2d_handle_t;

typedef struct {
    dnx_algo_port_state_e state;
    dnx_algo_port_info_s info;
    bcm_port_if_t interface_type;
    int interface_offset;
    int nif_handle;
    dnx_algo_port_db_2d_handle_t in_tm_handle;
    dnx_algo_port_db_2d_handle_t pp_dsp_handle;
    dnx_algo_port_db_2d_handle_t sch_handle;
    dnx_algo_port_db_2d_handle_t sch_if_handle;
    dnx_algo_port_db_2d_handle_t pp_handle;
    int ptc;
    int ilkn_handle;
    int flexe_client_handle;
    int flexe_mac_handle;
    int flexe_sar_handle;
    int flexe_phy_handle;
    dnx_algo_port_db_2d_handle_t tm_interface_handle;
    dnx_algo_port_db_2d_handle_t interface_handle;
    int fabric_handle;
    int in_channel;
    int out_channel;
    dnx_algo_port_tdm_mode_e tdm_mode;
    uint32 port_app_flags;
} dnx_algo_port_db_logical_t;

typedef struct {
    uint32 degrade_thr;
    uint32 degrade_cu_thr;
    uint32 fail_thr;
    uint32 fail_cu_thr;
    uint32 interval;
    uint32 action_enabled;
    uint32 hold_off_interval;
} dnx_algo_port_signal_quality_phy_config_t;

typedef struct {
    uint32 interval_cnt;
    uint32 prev_error_rate;
    uint64 prev_cnt;
    uint64 prev_uncorrectable_cnt;
    uint32 prev_state_handler;
    uint32 prev_state_sampler;
    uint32 hold_off_interval_cnt;
} dnx_algo_port_signal_quality_phy_state_t;

typedef struct {
    dnx_algo_port_signal_quality_phy_config_t* phy_config;
    dnx_algo_port_signal_quality_phy_state_t* phy_state;
    bcm_pbmp_t enabled_ports;
    bcm_pbmp_t measure_mode;
} dnx_algo_port_signal_quality_db_t;

typedef struct {
    int flr_fw_support;
    bcm_port_flr_link_config_t link_config;
} dnx_algo_port_flr_db_t;

typedef struct {
    int valid;
    bcm_pbmp_t phys;
    int first_phy;
    bcm_port_t master_logical_port;
    dnx_algo_port_rmc_info_t logical_fifos[BCM_PORT_MAX_NOF_PRIORITY_GROUPS];
    int latch_down;
    int loopback_original_link_training;
    int loopback_original_phy_lane_config;
    int ext_txpi_enable;
    int frame_preemptable;
    dnx_algo_port_flr_db_t flr;
} dnx_algo_port_db_nif_t;

typedef struct {
    int ref_count;
    uint32 pp_port;
    bcm_core_t core;
    int is_lag;
    bcm_trunk_t lag_id;
    bcm_port_t master_logical_port;
    dnx_algo_port_header_mode_e header_mode;
    int ingress_llvp_profile_valid;
    int egress_llvp_profile_valid;
    int header_type_in;
    int header_type_out;
} dnx_algo_port_db_pp_t;

typedef struct {
    int ref_count;
    uint32 out_tm_port;
    bcm_core_t core;
    int base_q_pair;
    int priorities;
    int is_mc;
    bcm_port_t master_logical_port;
} dnx_algo_port_db_out_tm_t;

typedef struct {
    int valid;
    uint32 pp_dsp;
    bcm_core_t core;
    dnx_algo_port_db_2d_handle_t out_tm_handle;
    bcm_port_t master_logical_port;
} dnx_algo_port_db_pp_dsp_t;

typedef struct {
    int ref_count;
    uint32 in_tm_port;
    bcm_core_t core;
    int in_tm_port_nof;
    bcm_port_t master_logical_port;
} dnx_algo_port_db_in_tm_t;

typedef struct {
    int valid;
    int is_egress_interleave;
    int egr_if;
    int ch_egr_if;
    bcm_port_t master_logical_port;
    bcm_port_t rcy_mirror_logical_port;
} dnx_algo_port_db_tm_interface_t;

typedef struct {
    int valid;
    bcm_core_t core;
    int is_channelized;
    int is_ingress_interleave;
    int rx_speed;
    int tx_speed;
    dnx_algo_port_if_tdm_mode_e tdm_mode;
    bcm_port_t master_tdm_logical_port;
    bcm_port_t master_non_tdm_logical_port;
    bcm_port_t master_logical_port;
    dnx_algo_port_db_2d_handle_t tm_interface_handle;
    int fec_type;
} dnx_algo_port_db_interface_t;

typedef struct {
    int ref_count;
    int base_hr;
    int sch_priorities;
    bcm_port_t master_logical_port;
} dnx_algo_port_db_sch_t;

typedef struct {
    int valid;
    int sch_if;
    int priority_propagation_enable;
    bcm_port_t master_logical_port;
} dnx_algo_port_db_sch_if_t;

typedef struct {
    int valid;
    int link;
    bcm_port_t master_logical_port;
    int prbs_mode;
    int speed;
    int loopback_original_link_training;
    int loopback_original_phy_lane_config;
    int fec_type;
} dnx_algo_port_db_fabric_t;

typedef struct {
    int valid;
    bcm_port_t master_logical_port;
    int nof_segments;
    int is_over_fabric;
    int is_elk;
    bcm_pbmp_t lanes;
    bcm_port_nif_scheduler_t priority;
} dnx_algo_port_db_ilkn_t;

typedef struct {
    int valid;
    int client_index;
    int client_id;
    bcm_port_t master_logical_port;
    int is_bypass;
    bcm_port_flexe_oam_base_period_t bas_period;
    int stat_channel;
} dnx_algo_port_db_flexe_client_t;

typedef struct {
    int valid;
    bcm_port_t master_logical_port;
    int client_index;
    dnx_algo_port_rmc_info_t logical_fifos[DNX_DATA_MAX_NIF_MAC_CLIENT_PRIORITY_GROUPS_NOF];
    int loopback_enable;
    int mgmt_channel;
} dnx_algo_port_db_flexe_mac_t;

typedef struct {
    int valid;
    bcm_port_t master_logical_port;
    int client_index;
    int virtual_flexe_channel;
    int rx_is_eth;
    int tx_is_eth;
} dnx_algo_port_db_flexe_sar_t;

typedef struct {
    int valid;
    bcm_port_t master_logical_port;
    int core_port;
    int channel;
    int rx_1588_en;
    int tx_1588_en;
    int mac1_channel;
    int mac2_channel;
} dnx_algo_port_db_flexe_phy_t;

typedef struct {
    int dummy;
    sw_state_mutex_t portmod_mac_soft_reset_cb_lock;
} dnx_algo_port_db_general_t;

typedef struct {
    dnx_algo_port_db_flexe_client_t* client;
    dnx_algo_port_db_flexe_mac_t* mac;
    dnx_algo_port_db_flexe_sar_t* sar;
    dnx_algo_port_db_flexe_phy_t* phy;
} dnx_algo_port_db_flexe_t;

typedef struct {
    uint32 port_to_profile_map;
} dnx_algo_prd_info_t;

typedef struct {
    uint32 port;
    uint32 priority_group;
} counter_port_map_t;

typedef struct {
    uint32 port;
} port_rx_fifo_counter_t;

typedef struct {
    uint32 port;
} tx_fifo_counter_port_map_t;

typedef struct {
    uint32 first_header_size_to_skip;
    uint32 port_type;
    uint32 is_before;
    uint32 is_after;
} dnx_algo_skip_first_header_info_t;

typedef struct {
    dnx_algo_port_db_general_t general;
    dnx_algo_port_db_logical_t logical[SOC_MAX_NUM_PORTS];
    dnx_algo_port_db_nif_t* nif;
    dnx_algo_port_signal_quality_db_t signal_quality;
    dnx_algo_port_db_in_tm_t** in_tm;
    dnx_algo_port_db_pp_dsp_t** pp_dsp_db;
    dnx_algo_port_db_out_tm_t** out_tm;
    dnx_algo_port_db_sch_t** sch;
    dnx_algo_port_db_pp_t** pp;
    dnx_algo_res_t* pp_alloc;
    dnx_algo_port_db_ilkn_t* ilkn;
    dnx_algo_port_db_flexe_t flexe;
    dnx_algo_port_db_fabric_t* fabric;
    dnx_algo_port_db_tm_interface_t** tm_interface;
    dnx_algo_port_db_interface_t** interface;
    dnx_algo_port_db_sch_if_t** sch_interface;
    dnx_algo_template_t skip_first_user_defined_header_size_profile_data;
    dnx_algo_prd_info_t** prd;
    dnx_algo_res_t* ptc_alloc;
    counter_port_map_t* counter_port_map;
    port_rx_fifo_counter_t port_rx_fifo_counter;
    tx_fifo_counter_port_map_t* tx_fifo_counter_port_map;
} dnx_algo_port_db_t;


#endif /* __DNX_ALGO_PORT_TYPES_H__ */
