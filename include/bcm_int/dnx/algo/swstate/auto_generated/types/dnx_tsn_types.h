/** \file algo/swstate/auto_generated/types/dnx_tsn_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __DNX_TSN_TYPES_H__
#define __DNX_TSN_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <include/bcm/cosq.h>
#include <include/bcm/tsn.h>
#include <include/shared/shr_thread_manager.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_device.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_tsn.h>
#include <soc/dnxc/swstate/callbacks/sw_state_ll_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_linked_list.h>
#include <soc/dnxc/swstate/types/sw_state_mutex.h>
/*
 * ENUMs
 */

typedef enum {
    DNX_TSN_GATE_TYPE_TAF = 0,
    DNX_TSN_GATE_TYPE_TAS = 1,
    /**
     * dummy enum field, must be the last
     */
    DNX_TSN_GATE_TYPE_E_DUMMY
} dnx_tsn_gate_type_e;

typedef enum {
    DNX_TSN_PROFILE_STATE_INIT = 0,
    DNX_TSN_PROFILE_STATE_PENDING = 1,
    DNX_TSN_PROFILE_STATE_ACTIVATED = 2,
    /**
     * dummy enum field, must be the last
     */
    DNX_TSN_PROFILE_STATE_E_DUMMY
} dnx_tsn_profile_state_e;

/*
 * STRUCTs
 */

typedef struct {
    dnx_tsn_profile_state_e profile_state;
    bcm_tsn_taf_profile_t profile_data;
    bcm_ptp_timestamp_t config_change_time;
} dnx_taf_profile_data_t;

typedef struct {
    dnx_algo_res_t gate_alloc;
    dnx_algo_res_t pid_alloc;
    dnx_taf_profile_data_t* taf_profiles_data;
} dnx_tsn_db_taf_t;

typedef struct {
    dnx_tsn_profile_state_e profile_state;
    bcm_cosq_tas_profile_t profile_data;
    bcm_ptp_timestamp_t config_change_time;
    bcm_port_t port;
} dnx_tas_profile_data_t;

typedef struct {
    dnx_algo_res_t* gate_alloc;
    dnx_algo_res_t* pid_alloc;
    int** egq_if_to_gate_mapping;
    dnx_tas_profile_data_t** tas_profiles_data;
} dnx_tsn_db_tas_t;

typedef struct {
    dnx_algo_res_t* gate_alloc;
    int** tsn_egr_if_to_gate_mapping;
    bcm_ptp_timestamp_t** ptp_base_time;
} dnx_tsn_db_cqf_t;

typedef struct {
    dnx_tsn_gate_type_e type;
    int pid;
} dnx_tsn_thread_pending_pid_t;

typedef struct {
    shr_thread_manager_handler_t tsn_thread_handler;
    sw_state_sorted_ll_t pending_list;
    SHR_BITDCL* taf_gates_to_reset;
    SHR_BITDCL* tas_ports_to_reset;
    sw_state_mutex_t mutex;
} dnx_tsn_db_tsn_thread_t;

typedef struct {
    dnx_tsn_db_taf_t taf;
    dnx_tsn_db_tas_t tas;
    dnx_tsn_db_cqf_t cqf;
    dnx_tsn_db_tsn_thread_t tsn_thread;
    sw_state_mutex_t mutex;
} dnx_tsn_db_t;


#endif /* __DNX_TSN_TYPES_H__ */
