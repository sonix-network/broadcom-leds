/** \file algo/swstate/auto_generated/types/crps_types.h
 *
 * sw state types (structs/enums/typedefs)
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __CRPS_TYPES_H__
#define __CRPS_TYPES_H__

#include <soc/dnxc/swstate/dnxc_sw_state_h_includes.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <include/bcm/stat.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_max_crps.h>
/*
 * STRUCTs
 */

typedef struct {
    uint64 condition_user_data;
    uint32 action_flags;
    int enable;
    bcm_stat_eviction_conditional_source_t condition_source_select;
    bcm_stat_eviction_conditional_qual_t qualifier;
} dnx_eviction_conditional_t;

typedef struct {
    uint32 start;
    uint32 end;
} dnx_engine_eviction_range_t;

typedef struct {
    bcm_eviction_destination_type_t eviction_type;
    bcm_eviction_record_format_t record_format;
    int eviction_event_id;
    uint32 sequential_timer_value;
    int dma_fifo;
    int eviction_algorithmic_disable;
    dnx_eviction_conditional_t conditional;
    dnx_engine_eviction_range_t eviction_range;
} dnx_engine_eviction_t;

typedef struct {
    uint32 valid;
    uint32 offset;
    int start;
    int end;
} dnx_type_config_t;

typedef struct {
    int size;
    uint32 start;
    uint32 end;
} dnx_set_config_t;

typedef struct {
    int next_engine_id;
    int prev_engine_id;
    int database_id;
    bcm_stat_counter_interface_type_t src_type;
    int command_id;
    bcm_stat_counter_format_type_t format;
    int counter_size;
    bcm_stat_counter_mode_t mode;
    int counter_set_size;
    int type_hw_valid[BCM_STAT_MAX_NUMBER_OF_OBJECT_TYPES];
} dnx_engine_interface_info_t;

typedef struct {
    int counting_enable;
    int eviction_enable;
} dnx_engine_enablers_t;

typedef struct {
    uint32 logical_object_id_first;
    uint32 logical_object_id_last;
} dnx_engine_log_obj_id_range_t;

typedef struct {
    int rate_calculation_enable;
    uint32 next_seq_counter_idx;
    uint8* sequence_num;
    uint8 (*seq_period_shadow)[6];
    uint8 (*algo_shadow)[6];
} dnx_engine_rate_info_t;

typedef struct {
    int used_for_meter;
    int config_started;
    int config_done;
    dnx_engine_enablers_t enablers;
    dnx_engine_interface_info_t interface;
    dnx_engine_eviction_t eviction;
    dnx_engine_log_obj_id_range_t log_obj_id_range;
    dnx_engine_rate_info_t rate;
    uint64* counter;
} dnx_engine_info_t;

typedef struct {
    int base_engine;
    dnx_type_config_t type[BCM_STAT_MAX_NUMBER_OF_OBJECT_TYPES];
    dnx_set_config_t set[BCM_STAT_MAX_NUMBER_OF_COUNTER_SETS_PER_DB];
} dnx_database_info_t;

typedef struct {
    dnx_engine_info_t** proc;
    dnx_database_info_t** database;
    dnx_algo_res_t* database_res;
} dnx_crps_db_t;


#endif /* __CRPS_TYPES_H__ */
