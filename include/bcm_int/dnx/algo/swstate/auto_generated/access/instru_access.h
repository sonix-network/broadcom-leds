/** \file algo/swstate/auto_generated/access/instru_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __INSTRU_ACCESS_H__
#define __INSTRU_ACCESS_H__

#include <bcm_int/dnx/algo/swstate/auto_generated/types/instru_types.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <include/bcm_int/dnx/algo/instru/algo_instru.h>
#include <include/soc/dnx/dnx_data/auto_generated/dnx_data_instru.h>
#include <soc/dnxc/swstate/callbacks/sw_state_htb_callbacks.h>
#include <soc/dnxc/swstate/types/sw_state_bitmap.h>
#include <soc/dnxc/swstate/types/sw_state_hash_table.h>
/*
 * TYPEDEFs
 */

typedef int (*instru_is_init_cb)(
    int unit, uint8 *is_init);

typedef int (*instru_init_cb)(
    int unit);

typedef int (*instru_sflow_info_sflow_destination_profile_set_cb)(
    int unit, dnx_algo_template_t sflow_destination_profile);

typedef int (*instru_sflow_info_sflow_destination_profile_get_cb)(
    int unit, dnx_algo_template_t *sflow_destination_profile);

typedef int (*instru_sflow_info_sflow_destination_profile_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*instru_sflow_info_sflow_destination_profile_allocate_single_cb)(
    int unit, uint32 flags, sflow_destination_key_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

typedef int (*instru_sflow_info_sflow_destination_profile_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

typedef int (*instru_sflow_info_sflow_destination_profile_exchange_cb)(
    int unit, uint32 flags, int nof_references, const sflow_destination_key_t *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

typedef int (*instru_sflow_info_sflow_destination_profile_profile_data_get_cb)(
    int unit, int profile, int *ref_count, sflow_destination_key_t *profile_data);

typedef int (*instru_sflow_info_sflow_destination_profile_profile_get_cb)(
    int unit, const sflow_destination_key_t *profile_data, int *profile);

typedef int (*instru_sflow_info_sflow_destination_profile_get_next_cb)(
    int unit, int *current_profile);

typedef int (*instru_sflow_info_raw_outlifs_by_profile_set_cb)(
    int unit, uint32 raw_outlifs_by_profile_idx_0, uint32 raw_outlifs_by_profile_idx_1, int raw_outlifs_by_profile);

typedef int (*instru_sflow_info_raw_outlifs_by_profile_get_cb)(
    int unit, uint32 raw_outlifs_by_profile_idx_0, uint32 raw_outlifs_by_profile_idx_1, int *raw_outlifs_by_profile);

typedef int (*instru_sflow_info_raw_outlifs_by_profile_alloc_cb)(
    int unit);

typedef int (*instru_sflow_info_sflow_encap_to_sflow_destination_profile_create_cb)(
    int unit, sw_state_htbl_init_info_t *init_info);

typedef int (*instru_sflow_info_sflow_encap_to_sflow_destination_profile_find_cb)(
    int unit, const int *key, int *value, uint8 *found);

typedef int (*instru_sflow_info_sflow_encap_to_sflow_destination_profile_insert_cb)(
    int unit, const int *key, const int *value, uint8 *success);

typedef int (*instru_sflow_info_sflow_encap_to_sflow_destination_profile_get_next_cb)(
    int unit, SW_STATE_HASH_TABLE_ITER *iter, const int *key, const int *value);

typedef int (*instru_sflow_info_sflow_encap_to_sflow_destination_profile_clear_cb)(
    int unit);

typedef int (*instru_sflow_info_sflow_encap_to_sflow_destination_profile_delete_cb)(
    int unit, const int *key);

typedef int (*instru_sflow_info_nof_sflow_encaps_set_cb)(
    int unit, int nof_sflow_encaps);

typedef int (*instru_sflow_info_nof_sflow_encaps_get_cb)(
    int unit, int *nof_sflow_encaps);

typedef int (*instru_sflow_info_nof_sflow_encaps_inc_cb)(
    int unit, uint32 inc_value);

typedef int (*instru_sflow_info_nof_sflow_encaps_dec_cb)(
    int unit, uint32 dec_value);

typedef int (*instru_sflow_info_agent_ip_address_set_cb)(
    int unit, uint32 agent_ip_address);

typedef int (*instru_sflow_info_agent_ip_address_get_cb)(
    int unit, uint32 *agent_ip_address);

typedef int (*instru_eventor_info_flags_set_cb)(
    int unit, uint32 flags);

typedef int (*instru_eventor_info_flags_get_cb)(
    int unit, uint32 *flags);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_alloc_bitmap_cb)(
    int unit);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_set_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_clear_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_get_cb)(
    int unit, uint32 _bit_num, uint8* result);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_read_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_write_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_and_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_or_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_xor_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_remove_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_negate_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_clear_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_set_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_null_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_test_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_rx_sram_banks_bitmap_bit_range_count_cb)(
    int unit, uint32 _first, uint32 _range, int *result);

typedef int (*instru_eventor_info_builder_configured_bitmap_alloc_bitmap_cb)(
    int unit);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_set_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_clear_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_get_cb)(
    int unit, uint32 _bit_num, uint8* result);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_read_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_write_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_and_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_or_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_xor_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_remove_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_negate_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_clear_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_set_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_null_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_test_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_builder_configured_bitmap_bit_range_count_cb)(
    int unit, uint32 _first, uint32 _range, int *result);

typedef int (*instru_eventor_info_rx_contexts_bitmap_alloc_bitmap_cb)(
    int unit);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_set_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_clear_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_get_cb)(
    int unit, uint32 _bit_num, uint8* result);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_read_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_write_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_and_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_or_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_xor_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_remove_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_negate_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_clear_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_set_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_null_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_test_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_rx_contexts_bitmap_bit_range_count_cb)(
    int unit, uint32 _first, uint32 _range, int *result);

typedef int (*instru_eventor_info_rx_contexts_info_alloc_cb)(
    int unit);

typedef int (*instru_eventor_info_rx_contexts_info_context_type_set_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 context_type);

typedef int (*instru_eventor_info_rx_contexts_info_context_type_get_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 *context_type);

typedef int (*instru_eventor_info_rx_contexts_info_buffer0_offset_set_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 buffer0_offset);

typedef int (*instru_eventor_info_rx_contexts_info_buffer0_offset_get_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 *buffer0_offset);

typedef int (*instru_eventor_info_rx_contexts_info_buffer1_offset_set_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 buffer1_offset);

typedef int (*instru_eventor_info_rx_contexts_info_buffer1_offset_get_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 *buffer1_offset);

typedef int (*instru_eventor_info_rx_contexts_info_buffer_size_set_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 buffer_size);

typedef int (*instru_eventor_info_rx_contexts_info_buffer_size_get_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 *buffer_size);

typedef int (*instru_eventor_info_rx_contexts_info_program0_offset_set_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 program0_offset);

typedef int (*instru_eventor_info_rx_contexts_info_program0_offset_get_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 *program0_offset);

typedef int (*instru_eventor_info_rx_contexts_info_program1_offset_set_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 program1_offset);

typedef int (*instru_eventor_info_rx_contexts_info_program1_offset_get_cb)(
    int unit, uint32 rx_contexts_info_idx_0, uint32 *program1_offset);

typedef int (*instru_eventor_info_tx_contexts_bitmap_alloc_bitmap_cb)(
    int unit);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_set_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_clear_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_get_cb)(
    int unit, uint32 _bit_num, uint8* result);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_read_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_write_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_and_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_or_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_xor_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_remove_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_negate_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_clear_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_set_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_null_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_test_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_contexts_bitmap_bit_range_count_cb)(
    int unit, uint32 _first, uint32 _range, int *result);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_alloc_bitmap_cb)(
    int unit);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_set_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_clear_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_get_cb)(
    int unit, uint32 _bit_num, uint8* result);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_read_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_write_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_and_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_or_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_xor_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_remove_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_negate_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_clear_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_set_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_null_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_test_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_count_cb)(
    int unit, uint32 _first, uint32 _range, int *result);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_alloc_bitmap_cb)(
    int unit);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_set_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_clear_cb)(
    int unit, uint32 _bit_num);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_get_cb)(
    int unit, uint32 _bit_num, uint8* result);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_read_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 result_first, uint32 _range, SHR_BITDCL *result);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_write_cb)(
    int unit, uint32 sw_state_bmp_first, uint32 input_bmp_first, uint32 _range, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_and_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_or_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_xor_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_remove_cb)(
    int unit, uint32 _first, uint32 _count, SHR_BITDCL *input_bmp);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_negate_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_clear_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_set_cb)(
    int unit, uint32 _first, uint32 _count);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_null_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_test_cb)(
    int unit, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_eq_cb)(
    int unit, SHR_BITDCL *input_bmp, uint32 _first, uint32 _count, uint8 *result);

typedef int (*instru_eventor_info_tx_sram_banks_bitmap_bit_range_count_cb)(
    int unit, uint32 _first, uint32 _range, int *result);

typedef int (*instru_eventor_info_tx_contexts_info_alloc_cb)(
    int unit);

typedef int (*instru_eventor_info_tx_contexts_info_buffer0_offset_set_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 buffer0_offset);

typedef int (*instru_eventor_info_tx_contexts_info_buffer0_offset_get_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 *buffer0_offset);

typedef int (*instru_eventor_info_tx_contexts_info_buffer1_offset_set_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 buffer1_offset);

typedef int (*instru_eventor_info_tx_contexts_info_buffer1_offset_get_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 *buffer1_offset);

typedef int (*instru_eventor_info_tx_contexts_info_buffer_size_set_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 buffer_size);

typedef int (*instru_eventor_info_tx_contexts_info_buffer_size_get_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 *buffer_size);

typedef int (*instru_eventor_info_tx_contexts_info_program0_offset_set_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 program0_offset);

typedef int (*instru_eventor_info_tx_contexts_info_program0_offset_get_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 *program0_offset);

typedef int (*instru_eventor_info_tx_contexts_info_program1_offset_set_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 program1_offset);

typedef int (*instru_eventor_info_tx_contexts_info_program1_offset_get_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 *program1_offset);

typedef int (*instru_eventor_info_tx_contexts_info_nof_operations_set_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 nof_operations);

typedef int (*instru_eventor_info_tx_contexts_info_nof_operations_get_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 *nof_operations);

typedef int (*instru_eventor_info_tx_contexts_info_nof_const_values_set_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 nof_const_values);

typedef int (*instru_eventor_info_tx_contexts_info_nof_const_values_get_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 *nof_const_values);

typedef int (*instru_eventor_info_tx_contexts_info_builders_set_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 builders);

typedef int (*instru_eventor_info_tx_contexts_info_builders_get_cb)(
    int unit, uint32 tx_contexts_info_idx_0, uint32 *builders);

typedef int (*instru_trigger_info_flags_set_cb)(
    int unit, uint32 trigger_info_idx_0, uint32 flags);

typedef int (*instru_trigger_info_flags_get_cb)(
    int unit, uint32 trigger_info_idx_0, uint32 *flags);

typedef int (*instru_trigger_info_start_time_set_cb)(
    int unit, uint32 trigger_info_idx_0, uint64 start_time);

typedef int (*instru_trigger_info_start_time_get_cb)(
    int unit, uint32 trigger_info_idx_0, uint64 *start_time);

typedef int (*instru_trigger_info_trigger_period_set_cb)(
    int unit, uint32 trigger_info_idx_0, uint64 trigger_period);

typedef int (*instru_trigger_info_trigger_period_get_cb)(
    int unit, uint32 trigger_info_idx_0, uint64 *trigger_period);

typedef int (*instru_trigger_info_nof_triggers_set_cb)(
    int unit, uint32 trigger_info_idx_0, uint32 nof_triggers);

typedef int (*instru_trigger_info_nof_triggers_get_cb)(
    int unit, uint32 trigger_info_idx_0, uint32 *nof_triggers);

typedef int (*instru_trigger_info_enable_set_cb)(
    int unit, uint32 trigger_info_idx_0, uint32 enable);

typedef int (*instru_trigger_info_enable_get_cb)(
    int unit, uint32 trigger_info_idx_0, uint32 *enable);

/*
 * STRUCTs
 */

typedef struct {
    instru_sflow_info_sflow_destination_profile_set_cb set;
    instru_sflow_info_sflow_destination_profile_get_cb get;
    instru_sflow_info_sflow_destination_profile_create_cb create;
    instru_sflow_info_sflow_destination_profile_allocate_single_cb allocate_single;
    instru_sflow_info_sflow_destination_profile_free_single_cb free_single;
    instru_sflow_info_sflow_destination_profile_exchange_cb exchange;
    instru_sflow_info_sflow_destination_profile_profile_data_get_cb profile_data_get;
    instru_sflow_info_sflow_destination_profile_profile_get_cb profile_get;
    instru_sflow_info_sflow_destination_profile_get_next_cb get_next;
} instru_sflow_info_sflow_destination_profile_cbs;

typedef struct {
    instru_sflow_info_raw_outlifs_by_profile_set_cb set;
    instru_sflow_info_raw_outlifs_by_profile_get_cb get;
    instru_sflow_info_raw_outlifs_by_profile_alloc_cb alloc;
} instru_sflow_info_raw_outlifs_by_profile_cbs;

typedef struct {
    instru_sflow_info_sflow_encap_to_sflow_destination_profile_create_cb create;
    instru_sflow_info_sflow_encap_to_sflow_destination_profile_find_cb find;
    instru_sflow_info_sflow_encap_to_sflow_destination_profile_insert_cb insert;
    instru_sflow_info_sflow_encap_to_sflow_destination_profile_get_next_cb get_next;
    instru_sflow_info_sflow_encap_to_sflow_destination_profile_clear_cb clear;
    instru_sflow_info_sflow_encap_to_sflow_destination_profile_delete_cb delete;
} instru_sflow_info_sflow_encap_to_sflow_destination_profile_cbs;

typedef struct {
    instru_sflow_info_nof_sflow_encaps_set_cb set;
    instru_sflow_info_nof_sflow_encaps_get_cb get;
    instru_sflow_info_nof_sflow_encaps_inc_cb inc;
    instru_sflow_info_nof_sflow_encaps_dec_cb dec;
} instru_sflow_info_nof_sflow_encaps_cbs;

typedef struct {
    instru_sflow_info_agent_ip_address_set_cb set;
    instru_sflow_info_agent_ip_address_get_cb get;
} instru_sflow_info_agent_ip_address_cbs;

typedef struct {
    instru_sflow_info_sflow_destination_profile_cbs sflow_destination_profile;
    instru_sflow_info_raw_outlifs_by_profile_cbs raw_outlifs_by_profile;
    instru_sflow_info_sflow_encap_to_sflow_destination_profile_cbs sflow_encap_to_sflow_destination_profile;
    instru_sflow_info_nof_sflow_encaps_cbs nof_sflow_encaps;
    instru_sflow_info_agent_ip_address_cbs agent_ip_address;
} instru_sflow_info_cbs;

typedef struct {
    instru_eventor_info_flags_set_cb set;
    instru_eventor_info_flags_get_cb get;
} instru_eventor_info_flags_cbs;

typedef struct {
    instru_eventor_info_rx_sram_banks_bitmap_alloc_bitmap_cb alloc_bitmap;
    instru_eventor_info_rx_sram_banks_bitmap_bit_set_cb bit_set;
    instru_eventor_info_rx_sram_banks_bitmap_bit_clear_cb bit_clear;
    instru_eventor_info_rx_sram_banks_bitmap_bit_get_cb bit_get;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_read_cb bit_range_read;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_write_cb bit_range_write;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_and_cb bit_range_and;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_or_cb bit_range_or;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_xor_cb bit_range_xor;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_remove_cb bit_range_remove;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_negate_cb bit_range_negate;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_clear_cb bit_range_clear;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_set_cb bit_range_set;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_null_cb bit_range_null;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_test_cb bit_range_test;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_eq_cb bit_range_eq;
    instru_eventor_info_rx_sram_banks_bitmap_bit_range_count_cb bit_range_count;
} instru_eventor_info_rx_sram_banks_bitmap_cbs;

typedef struct {
    instru_eventor_info_builder_configured_bitmap_alloc_bitmap_cb alloc_bitmap;
    instru_eventor_info_builder_configured_bitmap_bit_set_cb bit_set;
    instru_eventor_info_builder_configured_bitmap_bit_clear_cb bit_clear;
    instru_eventor_info_builder_configured_bitmap_bit_get_cb bit_get;
    instru_eventor_info_builder_configured_bitmap_bit_range_read_cb bit_range_read;
    instru_eventor_info_builder_configured_bitmap_bit_range_write_cb bit_range_write;
    instru_eventor_info_builder_configured_bitmap_bit_range_and_cb bit_range_and;
    instru_eventor_info_builder_configured_bitmap_bit_range_or_cb bit_range_or;
    instru_eventor_info_builder_configured_bitmap_bit_range_xor_cb bit_range_xor;
    instru_eventor_info_builder_configured_bitmap_bit_range_remove_cb bit_range_remove;
    instru_eventor_info_builder_configured_bitmap_bit_range_negate_cb bit_range_negate;
    instru_eventor_info_builder_configured_bitmap_bit_range_clear_cb bit_range_clear;
    instru_eventor_info_builder_configured_bitmap_bit_range_set_cb bit_range_set;
    instru_eventor_info_builder_configured_bitmap_bit_range_null_cb bit_range_null;
    instru_eventor_info_builder_configured_bitmap_bit_range_test_cb bit_range_test;
    instru_eventor_info_builder_configured_bitmap_bit_range_eq_cb bit_range_eq;
    instru_eventor_info_builder_configured_bitmap_bit_range_count_cb bit_range_count;
} instru_eventor_info_builder_configured_bitmap_cbs;

typedef struct {
    instru_eventor_info_rx_contexts_bitmap_alloc_bitmap_cb alloc_bitmap;
    instru_eventor_info_rx_contexts_bitmap_bit_set_cb bit_set;
    instru_eventor_info_rx_contexts_bitmap_bit_clear_cb bit_clear;
    instru_eventor_info_rx_contexts_bitmap_bit_get_cb bit_get;
    instru_eventor_info_rx_contexts_bitmap_bit_range_read_cb bit_range_read;
    instru_eventor_info_rx_contexts_bitmap_bit_range_write_cb bit_range_write;
    instru_eventor_info_rx_contexts_bitmap_bit_range_and_cb bit_range_and;
    instru_eventor_info_rx_contexts_bitmap_bit_range_or_cb bit_range_or;
    instru_eventor_info_rx_contexts_bitmap_bit_range_xor_cb bit_range_xor;
    instru_eventor_info_rx_contexts_bitmap_bit_range_remove_cb bit_range_remove;
    instru_eventor_info_rx_contexts_bitmap_bit_range_negate_cb bit_range_negate;
    instru_eventor_info_rx_contexts_bitmap_bit_range_clear_cb bit_range_clear;
    instru_eventor_info_rx_contexts_bitmap_bit_range_set_cb bit_range_set;
    instru_eventor_info_rx_contexts_bitmap_bit_range_null_cb bit_range_null;
    instru_eventor_info_rx_contexts_bitmap_bit_range_test_cb bit_range_test;
    instru_eventor_info_rx_contexts_bitmap_bit_range_eq_cb bit_range_eq;
    instru_eventor_info_rx_contexts_bitmap_bit_range_count_cb bit_range_count;
} instru_eventor_info_rx_contexts_bitmap_cbs;

typedef struct {
    instru_eventor_info_rx_contexts_info_context_type_set_cb set;
    instru_eventor_info_rx_contexts_info_context_type_get_cb get;
} instru_eventor_info_rx_contexts_info_context_type_cbs;

typedef struct {
    instru_eventor_info_rx_contexts_info_buffer0_offset_set_cb set;
    instru_eventor_info_rx_contexts_info_buffer0_offset_get_cb get;
} instru_eventor_info_rx_contexts_info_buffer0_offset_cbs;

typedef struct {
    instru_eventor_info_rx_contexts_info_buffer1_offset_set_cb set;
    instru_eventor_info_rx_contexts_info_buffer1_offset_get_cb get;
} instru_eventor_info_rx_contexts_info_buffer1_offset_cbs;

typedef struct {
    instru_eventor_info_rx_contexts_info_buffer_size_set_cb set;
    instru_eventor_info_rx_contexts_info_buffer_size_get_cb get;
} instru_eventor_info_rx_contexts_info_buffer_size_cbs;

typedef struct {
    instru_eventor_info_rx_contexts_info_program0_offset_set_cb set;
    instru_eventor_info_rx_contexts_info_program0_offset_get_cb get;
} instru_eventor_info_rx_contexts_info_program0_offset_cbs;

typedef struct {
    instru_eventor_info_rx_contexts_info_program1_offset_set_cb set;
    instru_eventor_info_rx_contexts_info_program1_offset_get_cb get;
} instru_eventor_info_rx_contexts_info_program1_offset_cbs;

typedef struct {
    instru_eventor_info_rx_contexts_info_alloc_cb alloc;
    instru_eventor_info_rx_contexts_info_context_type_cbs context_type;
    instru_eventor_info_rx_contexts_info_buffer0_offset_cbs buffer0_offset;
    instru_eventor_info_rx_contexts_info_buffer1_offset_cbs buffer1_offset;
    instru_eventor_info_rx_contexts_info_buffer_size_cbs buffer_size;
    instru_eventor_info_rx_contexts_info_program0_offset_cbs program0_offset;
    instru_eventor_info_rx_contexts_info_program1_offset_cbs program1_offset;
} instru_eventor_info_rx_contexts_info_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_bitmap_alloc_bitmap_cb alloc_bitmap;
    instru_eventor_info_tx_contexts_bitmap_bit_set_cb bit_set;
    instru_eventor_info_tx_contexts_bitmap_bit_clear_cb bit_clear;
    instru_eventor_info_tx_contexts_bitmap_bit_get_cb bit_get;
    instru_eventor_info_tx_contexts_bitmap_bit_range_read_cb bit_range_read;
    instru_eventor_info_tx_contexts_bitmap_bit_range_write_cb bit_range_write;
    instru_eventor_info_tx_contexts_bitmap_bit_range_and_cb bit_range_and;
    instru_eventor_info_tx_contexts_bitmap_bit_range_or_cb bit_range_or;
    instru_eventor_info_tx_contexts_bitmap_bit_range_xor_cb bit_range_xor;
    instru_eventor_info_tx_contexts_bitmap_bit_range_remove_cb bit_range_remove;
    instru_eventor_info_tx_contexts_bitmap_bit_range_negate_cb bit_range_negate;
    instru_eventor_info_tx_contexts_bitmap_bit_range_clear_cb bit_range_clear;
    instru_eventor_info_tx_contexts_bitmap_bit_range_set_cb bit_range_set;
    instru_eventor_info_tx_contexts_bitmap_bit_range_null_cb bit_range_null;
    instru_eventor_info_tx_contexts_bitmap_bit_range_test_cb bit_range_test;
    instru_eventor_info_tx_contexts_bitmap_bit_range_eq_cb bit_range_eq;
    instru_eventor_info_tx_contexts_bitmap_bit_range_count_cb bit_range_count;
} instru_eventor_info_tx_contexts_bitmap_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_queue_type_bitmap_alloc_bitmap_cb alloc_bitmap;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_set_cb bit_set;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_clear_cb bit_clear;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_get_cb bit_get;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_read_cb bit_range_read;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_write_cb bit_range_write;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_and_cb bit_range_and;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_or_cb bit_range_or;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_xor_cb bit_range_xor;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_remove_cb bit_range_remove;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_negate_cb bit_range_negate;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_clear_cb bit_range_clear;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_set_cb bit_range_set;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_null_cb bit_range_null;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_test_cb bit_range_test;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_eq_cb bit_range_eq;
    instru_eventor_info_tx_contexts_queue_type_bitmap_bit_range_count_cb bit_range_count;
} instru_eventor_info_tx_contexts_queue_type_bitmap_cbs;

typedef struct {
    instru_eventor_info_tx_sram_banks_bitmap_alloc_bitmap_cb alloc_bitmap;
    instru_eventor_info_tx_sram_banks_bitmap_bit_set_cb bit_set;
    instru_eventor_info_tx_sram_banks_bitmap_bit_clear_cb bit_clear;
    instru_eventor_info_tx_sram_banks_bitmap_bit_get_cb bit_get;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_read_cb bit_range_read;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_write_cb bit_range_write;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_and_cb bit_range_and;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_or_cb bit_range_or;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_xor_cb bit_range_xor;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_remove_cb bit_range_remove;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_negate_cb bit_range_negate;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_clear_cb bit_range_clear;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_set_cb bit_range_set;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_null_cb bit_range_null;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_test_cb bit_range_test;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_eq_cb bit_range_eq;
    instru_eventor_info_tx_sram_banks_bitmap_bit_range_count_cb bit_range_count;
} instru_eventor_info_tx_sram_banks_bitmap_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_buffer0_offset_set_cb set;
    instru_eventor_info_tx_contexts_info_buffer0_offset_get_cb get;
} instru_eventor_info_tx_contexts_info_buffer0_offset_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_buffer1_offset_set_cb set;
    instru_eventor_info_tx_contexts_info_buffer1_offset_get_cb get;
} instru_eventor_info_tx_contexts_info_buffer1_offset_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_buffer_size_set_cb set;
    instru_eventor_info_tx_contexts_info_buffer_size_get_cb get;
} instru_eventor_info_tx_contexts_info_buffer_size_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_program0_offset_set_cb set;
    instru_eventor_info_tx_contexts_info_program0_offset_get_cb get;
} instru_eventor_info_tx_contexts_info_program0_offset_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_program1_offset_set_cb set;
    instru_eventor_info_tx_contexts_info_program1_offset_get_cb get;
} instru_eventor_info_tx_contexts_info_program1_offset_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_nof_operations_set_cb set;
    instru_eventor_info_tx_contexts_info_nof_operations_get_cb get;
} instru_eventor_info_tx_contexts_info_nof_operations_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_nof_const_values_set_cb set;
    instru_eventor_info_tx_contexts_info_nof_const_values_get_cb get;
} instru_eventor_info_tx_contexts_info_nof_const_values_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_builders_set_cb set;
    instru_eventor_info_tx_contexts_info_builders_get_cb get;
} instru_eventor_info_tx_contexts_info_builders_cbs;

typedef struct {
    instru_eventor_info_tx_contexts_info_alloc_cb alloc;
    instru_eventor_info_tx_contexts_info_buffer0_offset_cbs buffer0_offset;
    instru_eventor_info_tx_contexts_info_buffer1_offset_cbs buffer1_offset;
    instru_eventor_info_tx_contexts_info_buffer_size_cbs buffer_size;
    instru_eventor_info_tx_contexts_info_program0_offset_cbs program0_offset;
    instru_eventor_info_tx_contexts_info_program1_offset_cbs program1_offset;
    instru_eventor_info_tx_contexts_info_nof_operations_cbs nof_operations;
    instru_eventor_info_tx_contexts_info_nof_const_values_cbs nof_const_values;
    instru_eventor_info_tx_contexts_info_builders_cbs builders;
} instru_eventor_info_tx_contexts_info_cbs;

typedef struct {
    instru_eventor_info_flags_cbs flags;
    instru_eventor_info_rx_sram_banks_bitmap_cbs rx_sram_banks_bitmap;
    instru_eventor_info_builder_configured_bitmap_cbs builder_configured_bitmap;
    instru_eventor_info_rx_contexts_bitmap_cbs rx_contexts_bitmap;
    instru_eventor_info_rx_contexts_info_cbs rx_contexts_info;
    instru_eventor_info_tx_contexts_bitmap_cbs tx_contexts_bitmap;
    instru_eventor_info_tx_contexts_queue_type_bitmap_cbs tx_contexts_queue_type_bitmap;
    instru_eventor_info_tx_sram_banks_bitmap_cbs tx_sram_banks_bitmap;
    instru_eventor_info_tx_contexts_info_cbs tx_contexts_info;
} instru_eventor_info_cbs;

typedef struct {
    instru_trigger_info_flags_set_cb set;
    instru_trigger_info_flags_get_cb get;
} instru_trigger_info_flags_cbs;

typedef struct {
    instru_trigger_info_start_time_set_cb set;
    instru_trigger_info_start_time_get_cb get;
} instru_trigger_info_start_time_cbs;

typedef struct {
    instru_trigger_info_trigger_period_set_cb set;
    instru_trigger_info_trigger_period_get_cb get;
} instru_trigger_info_trigger_period_cbs;

typedef struct {
    instru_trigger_info_nof_triggers_set_cb set;
    instru_trigger_info_nof_triggers_get_cb get;
} instru_trigger_info_nof_triggers_cbs;

typedef struct {
    instru_trigger_info_enable_set_cb set;
    instru_trigger_info_enable_get_cb get;
} instru_trigger_info_enable_cbs;

typedef struct {
    instru_trigger_info_flags_cbs flags;
    instru_trigger_info_start_time_cbs start_time;
    instru_trigger_info_trigger_period_cbs trigger_period;
    instru_trigger_info_nof_triggers_cbs nof_triggers;
    instru_trigger_info_enable_cbs enable;
} instru_trigger_info_cbs;

typedef struct {
    instru_is_init_cb is_init;
    instru_init_cb init;
    instru_sflow_info_cbs sflow_info;
    instru_eventor_info_cbs eventor_info;
    instru_trigger_info_cbs trigger_info;
} instru_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern instru_cbs instru;

#endif /* __INSTRU_ACCESS_H__ */
