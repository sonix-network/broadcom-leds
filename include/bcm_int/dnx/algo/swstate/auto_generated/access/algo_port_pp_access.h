/** \file algo/swstate/auto_generated/access/algo_port_pp_access.h
 *
 * sw state functions declarations
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated.
 * Edits to this file will be lost when it is regenerated.
 *
 */
/*
 * This license is set out in https://raw.githubusercontent.com/Broadcom-Network-Switching-Software/OpenBCM/master/Legal/LICENSE file.
 * 
 * Copyright 2007-2022 Broadcom Inc. All rights reserved.
 */

#ifndef __ALGO_PORT_PP_ACCESS_H__
#define __ALGO_PORT_PP_ACCESS_H__

#include <bcm_int/dnx/algo/swstate/auto_generated/types/algo_port_pp_types.h>
#include <bcm_int/dnx/algo/port_pp/algo_port_pp.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr.h>
#include <bcm_int/dnx/algo/res_mngr/res_mngr_internal.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr.h>
#include <bcm_int/dnx/algo/template_mngr/template_mngr_internal.h>
#include <bcm_int/dnx/algo/swstate/auto_generated/types/port_tpid_types.h>
/*
 * TYPEDEFs
 */

typedef int (*algo_port_pp_db_is_init_cb)(
    int unit, uint8 *is_init);

typedef int (*algo_port_pp_db_init_cb)(
    int unit);

typedef int (*algo_port_pp_db_esem_default_result_profile_set_cb)(
    int unit, dnx_algo_res_t esem_default_result_profile);

typedef int (*algo_port_pp_db_esem_default_result_profile_get_cb)(
    int unit, dnx_algo_res_t *esem_default_result_profile);

typedef int (*algo_port_pp_db_esem_default_result_profile_create_cb)(
    int unit, dnx_algo_res_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_esem_default_result_profile_allocate_single_cb)(
    int unit, uint32 flags, void *extra_arguments, int *element);

typedef int (*algo_port_pp_db_esem_default_result_profile_free_single_cb)(
    int unit, int element, void *extra_arguments);

typedef int (*algo_port_pp_db_esem_default_result_profile_is_allocated_cb)(
    int unit, int element, uint8 *is_allocated);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_ingress_set_cb)(
    int unit, dnx_algo_template_t port_pp_tpid_profile_ingress);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_ingress_get_cb)(
    int unit, dnx_algo_template_t *port_pp_tpid_profile_ingress);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_ingress_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_ingress_allocate_single_cb)(
    int unit, uint32 flags, uint32 *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_ingress_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_ingress_exchange_cb)(
    int unit, uint32 flags, int nof_references, const uint32 *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_ingress_profile_data_get_cb)(
    int unit, int profile, int *ref_count, uint32 *profile_data);

typedef int (*algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_set_cb)(
    int unit, dnx_algo_template_t ipvx_o_mpls_parsing_enable_profile);

typedef int (*algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_get_cb)(
    int unit, dnx_algo_template_t *ipvx_o_mpls_parsing_enable_profile);

typedef int (*algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_allocate_single_cb)(
    int unit, uint32 flags, uint32 *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

typedef int (*algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

typedef int (*algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_exchange_cb)(
    int unit, uint32 flags, int nof_references, const uint32 *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

typedef int (*algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_profile_data_get_cb)(
    int unit, int profile, int *ref_count, uint32 *profile_data);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_egress_set_cb)(
    int unit, dnx_algo_template_t port_pp_tpid_profile_egress);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_egress_get_cb)(
    int unit, dnx_algo_template_t *port_pp_tpid_profile_egress);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_egress_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_egress_allocate_single_cb)(
    int unit, uint32 flags, uint32 *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_egress_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_egress_exchange_cb)(
    int unit, uint32 flags, int nof_references, const uint32 *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

typedef int (*algo_port_pp_db_port_pp_tpid_profile_egress_profile_data_get_cb)(
    int unit, int profile, int *ref_count, uint32 *profile_data);

typedef int (*algo_port_pp_db_egress_acceptable_frame_type_profile_set_cb)(
    int unit, dnx_algo_template_t egress_acceptable_frame_type_profile);

typedef int (*algo_port_pp_db_egress_acceptable_frame_type_profile_get_cb)(
    int unit, dnx_algo_template_t *egress_acceptable_frame_type_profile);

typedef int (*algo_port_pp_db_egress_acceptable_frame_type_profile_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_egress_acceptable_frame_type_profile_allocate_single_cb)(
    int unit, uint32 flags, acceptable_frame_type_template_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

typedef int (*algo_port_pp_db_egress_acceptable_frame_type_profile_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

typedef int (*algo_port_pp_db_egress_acceptable_frame_type_profile_exchange_cb)(
    int unit, uint32 flags, int nof_references, const acceptable_frame_type_template_t *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

typedef int (*algo_port_pp_db_egress_acceptable_frame_type_profile_profile_data_get_cb)(
    int unit, int profile, int *ref_count, acceptable_frame_type_template_t *profile_data);

typedef int (*algo_port_pp_db_egress_pp_port_sit_profile_set_cb)(
    int unit, dnx_algo_template_t egress_pp_port_sit_profile);

typedef int (*algo_port_pp_db_egress_pp_port_sit_profile_get_cb)(
    int unit, dnx_algo_template_t *egress_pp_port_sit_profile);

typedef int (*algo_port_pp_db_egress_pp_port_sit_profile_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_egress_pp_port_sit_profile_allocate_single_cb)(
    int unit, uint32 flags, dnx_sit_profile_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

typedef int (*algo_port_pp_db_egress_pp_port_sit_profile_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

typedef int (*algo_port_pp_db_egress_pp_port_sit_profile_replace_data_cb)(
    int unit, int profile,  const dnx_sit_profile_t *new_profile_data);

typedef int (*algo_port_pp_db_egress_pp_port_sit_profile_profile_data_get_cb)(
    int unit, int profile, int *ref_count, dnx_sit_profile_t *profile_data);

typedef int (*algo_port_pp_db_pp_port_lb_profile_set_cb)(
    int unit, dnx_algo_template_t pp_port_lb_profile);

typedef int (*algo_port_pp_db_pp_port_lb_profile_get_cb)(
    int unit, dnx_algo_template_t *pp_port_lb_profile);

typedef int (*algo_port_pp_db_pp_port_lb_profile_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_pp_port_lb_profile_exchange_cb)(
    int unit, uint32 flags, int nof_references, const uint32 *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

typedef int (*algo_port_pp_db_pp_port_lb_profile_profile_data_get_cb)(
    int unit, int profile, int *ref_count, uint32 *profile_data);

typedef int (*algo_port_pp_db_pp_port_lb_profile_clear_cb)(
    int unit);

typedef int (*algo_port_pp_db_force_forward_mngr_set_cb)(
    int unit, uint32 mngr_idx_0, dnx_algo_template_t mngr);

typedef int (*algo_port_pp_db_force_forward_mngr_get_cb)(
    int unit, uint32 mngr_idx_0, dnx_algo_template_t *mngr);

typedef int (*algo_port_pp_db_force_forward_mngr_alloc_cb)(
    int unit);

typedef int (*algo_port_pp_db_force_forward_mngr_create_cb)(
    int unit, uint32 mngr_idx_0, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_force_forward_mngr_allocate_single_cb)(
    int unit, uint32 mngr_idx_0, uint32 flags, uint32 *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

typedef int (*algo_port_pp_db_force_forward_mngr_free_single_cb)(
    int unit, uint32 mngr_idx_0, int profile, uint8 *last_reference);

typedef int (*algo_port_pp_db_force_forward_trap_id_set_cb)(
    int unit, uint32 trap_id_idx_0, uint32 trap_id_idx_1, uint32 trap_id);

typedef int (*algo_port_pp_db_force_forward_trap_id_get_cb)(
    int unit, uint32 trap_id_idx_0, uint32 trap_id_idx_1, uint32 *trap_id);

typedef int (*algo_port_pp_db_force_forward_trap_id_alloc_cb)(
    int unit, uint32 nof_instances_to_alloc_0, uint32 nof_instances_to_alloc_1);

typedef int (*algo_port_pp_db_esem_access_cmd_set_cb)(
    int unit, dnx_algo_template_t access_cmd);

typedef int (*algo_port_pp_db_esem_access_cmd_get_cb)(
    int unit, dnx_algo_template_t *access_cmd);

typedef int (*algo_port_pp_db_esem_access_cmd_create_cb)(
    int unit, dnx_algo_template_create_data_t * data, void *extra_arguments);

typedef int (*algo_port_pp_db_esem_access_cmd_allocate_single_cb)(
    int unit, uint32 flags, dnx_esem_cmd_data_t *profile_data, void *extra_arguments, int *profile, uint8 *first_reference);

typedef int (*algo_port_pp_db_esem_access_cmd_free_single_cb)(
    int unit, int profile, uint8 *last_reference);

typedef int (*algo_port_pp_db_esem_access_cmd_exchange_cb)(
    int unit, uint32 flags, int nof_references, const dnx_esem_cmd_data_t *profile_data, int old_profile, const void *extra_arguments, int *new_profile, uint8 *first_reference, uint8 *last_reference);

typedef int (*algo_port_pp_db_esem_access_cmd_profile_data_get_cb)(
    int unit, int profile, int *ref_count, dnx_esem_cmd_data_t *profile_data);

typedef int (*algo_port_pp_db_esem_access_cmd_profile_get_cb)(
    int unit, const dnx_esem_cmd_data_t *profile_data, int *profile);

typedef int (*algo_port_pp_db_esem_access_cmd_advanced_algorithm_info_set_cb)(
    int unit, void *algorithm_info);

typedef int (*algo_port_pp_db_esem_access_cmd_advanced_algorithm_info_get_cb)(
    int unit, void *algorithm_info);

typedef int (*algo_port_pp_db_esem_predefine_esem_cmds_set_cb)(
    int unit, uint32 predefine_esem_cmds_idx_0, uint8 predefine_esem_cmds);

typedef int (*algo_port_pp_db_esem_predefine_esem_cmds_get_cb)(
    int unit, uint32 predefine_esem_cmds_idx_0, uint8 *predefine_esem_cmds);

typedef int (*algo_port_pp_db_recycle_app_alloc_cb)(
    int unit, uint32 recycle_app_idx_0);

typedef int (*algo_port_pp_db_recycle_app_type_set_cb)(
    int unit, uint32 recycle_app_idx_0, uint32 recycle_app_idx_1, uint32 type);

typedef int (*algo_port_pp_db_recycle_app_type_get_cb)(
    int unit, uint32 recycle_app_idx_0, uint32 recycle_app_idx_1, uint32 *type);

/*
 * STRUCTs
 */

typedef struct {
    algo_port_pp_db_esem_default_result_profile_set_cb set;
    algo_port_pp_db_esem_default_result_profile_get_cb get;
    algo_port_pp_db_esem_default_result_profile_create_cb create;
    algo_port_pp_db_esem_default_result_profile_allocate_single_cb allocate_single;
    algo_port_pp_db_esem_default_result_profile_free_single_cb free_single;
    algo_port_pp_db_esem_default_result_profile_is_allocated_cb is_allocated;
} algo_port_pp_db_esem_default_result_profile_cbs;

typedef struct {
    algo_port_pp_db_port_pp_tpid_profile_ingress_set_cb set;
    algo_port_pp_db_port_pp_tpid_profile_ingress_get_cb get;
    algo_port_pp_db_port_pp_tpid_profile_ingress_create_cb create;
    algo_port_pp_db_port_pp_tpid_profile_ingress_allocate_single_cb allocate_single;
    algo_port_pp_db_port_pp_tpid_profile_ingress_free_single_cb free_single;
    algo_port_pp_db_port_pp_tpid_profile_ingress_exchange_cb exchange;
    algo_port_pp_db_port_pp_tpid_profile_ingress_profile_data_get_cb profile_data_get;
} algo_port_pp_db_port_pp_tpid_profile_ingress_cbs;

typedef struct {
    algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_set_cb set;
    algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_get_cb get;
    algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_create_cb create;
    algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_allocate_single_cb allocate_single;
    algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_free_single_cb free_single;
    algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_exchange_cb exchange;
    algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_profile_data_get_cb profile_data_get;
} algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_cbs;

typedef struct {
    algo_port_pp_db_port_pp_tpid_profile_egress_set_cb set;
    algo_port_pp_db_port_pp_tpid_profile_egress_get_cb get;
    algo_port_pp_db_port_pp_tpid_profile_egress_create_cb create;
    algo_port_pp_db_port_pp_tpid_profile_egress_allocate_single_cb allocate_single;
    algo_port_pp_db_port_pp_tpid_profile_egress_free_single_cb free_single;
    algo_port_pp_db_port_pp_tpid_profile_egress_exchange_cb exchange;
    algo_port_pp_db_port_pp_tpid_profile_egress_profile_data_get_cb profile_data_get;
} algo_port_pp_db_port_pp_tpid_profile_egress_cbs;

typedef struct {
    algo_port_pp_db_egress_acceptable_frame_type_profile_set_cb set;
    algo_port_pp_db_egress_acceptable_frame_type_profile_get_cb get;
    algo_port_pp_db_egress_acceptable_frame_type_profile_create_cb create;
    algo_port_pp_db_egress_acceptable_frame_type_profile_allocate_single_cb allocate_single;
    algo_port_pp_db_egress_acceptable_frame_type_profile_free_single_cb free_single;
    algo_port_pp_db_egress_acceptable_frame_type_profile_exchange_cb exchange;
    algo_port_pp_db_egress_acceptable_frame_type_profile_profile_data_get_cb profile_data_get;
} algo_port_pp_db_egress_acceptable_frame_type_profile_cbs;

typedef struct {
    algo_port_pp_db_egress_pp_port_sit_profile_set_cb set;
    algo_port_pp_db_egress_pp_port_sit_profile_get_cb get;
    algo_port_pp_db_egress_pp_port_sit_profile_create_cb create;
    algo_port_pp_db_egress_pp_port_sit_profile_allocate_single_cb allocate_single;
    algo_port_pp_db_egress_pp_port_sit_profile_free_single_cb free_single;
    algo_port_pp_db_egress_pp_port_sit_profile_replace_data_cb replace_data;
    algo_port_pp_db_egress_pp_port_sit_profile_profile_data_get_cb profile_data_get;
} algo_port_pp_db_egress_pp_port_sit_profile_cbs;

typedef struct {
    algo_port_pp_db_pp_port_lb_profile_set_cb set;
    algo_port_pp_db_pp_port_lb_profile_get_cb get;
    algo_port_pp_db_pp_port_lb_profile_create_cb create;
    algo_port_pp_db_pp_port_lb_profile_exchange_cb exchange;
    algo_port_pp_db_pp_port_lb_profile_profile_data_get_cb profile_data_get;
    algo_port_pp_db_pp_port_lb_profile_clear_cb clear;
} algo_port_pp_db_pp_port_lb_profile_cbs;

typedef struct {
    algo_port_pp_db_force_forward_mngr_set_cb set;
    algo_port_pp_db_force_forward_mngr_get_cb get;
    algo_port_pp_db_force_forward_mngr_alloc_cb alloc;
    algo_port_pp_db_force_forward_mngr_create_cb create;
    algo_port_pp_db_force_forward_mngr_allocate_single_cb allocate_single;
    algo_port_pp_db_force_forward_mngr_free_single_cb free_single;
} algo_port_pp_db_force_forward_mngr_cbs;

typedef struct {
    algo_port_pp_db_force_forward_trap_id_set_cb set;
    algo_port_pp_db_force_forward_trap_id_get_cb get;
    algo_port_pp_db_force_forward_trap_id_alloc_cb alloc;
} algo_port_pp_db_force_forward_trap_id_cbs;

typedef struct {
    algo_port_pp_db_force_forward_mngr_cbs mngr;
    algo_port_pp_db_force_forward_trap_id_cbs trap_id;
} algo_port_pp_db_force_forward_cbs;

typedef struct {
    algo_port_pp_db_esem_access_cmd_set_cb set;
    algo_port_pp_db_esem_access_cmd_get_cb get;
    algo_port_pp_db_esem_access_cmd_create_cb create;
    algo_port_pp_db_esem_access_cmd_allocate_single_cb allocate_single;
    algo_port_pp_db_esem_access_cmd_free_single_cb free_single;
    algo_port_pp_db_esem_access_cmd_exchange_cb exchange;
    algo_port_pp_db_esem_access_cmd_profile_data_get_cb profile_data_get;
    algo_port_pp_db_esem_access_cmd_profile_get_cb profile_get;
    algo_port_pp_db_esem_access_cmd_advanced_algorithm_info_set_cb advanced_algorithm_info_set;
    algo_port_pp_db_esem_access_cmd_advanced_algorithm_info_get_cb advanced_algorithm_info_get;
} algo_port_pp_db_esem_access_cmd_cbs;

typedef struct {
    algo_port_pp_db_esem_predefine_esem_cmds_set_cb set;
    algo_port_pp_db_esem_predefine_esem_cmds_get_cb get;
} algo_port_pp_db_esem_predefine_esem_cmds_cbs;

typedef struct {
    algo_port_pp_db_esem_access_cmd_cbs access_cmd;
    algo_port_pp_db_esem_predefine_esem_cmds_cbs predefine_esem_cmds;
} algo_port_pp_db_esem_cbs;

typedef struct {
    algo_port_pp_db_recycle_app_type_set_cb set;
    algo_port_pp_db_recycle_app_type_get_cb get;
} algo_port_pp_db_recycle_app_type_cbs;

typedef struct {
    algo_port_pp_db_recycle_app_alloc_cb alloc;
    algo_port_pp_db_recycle_app_type_cbs type;
} algo_port_pp_db_recycle_app_cbs;

typedef struct {
    algo_port_pp_db_is_init_cb is_init;
    algo_port_pp_db_init_cb init;
    algo_port_pp_db_esem_default_result_profile_cbs esem_default_result_profile;
    algo_port_pp_db_port_pp_tpid_profile_ingress_cbs port_pp_tpid_profile_ingress;
    algo_port_pp_db_ipvx_o_mpls_parsing_enable_profile_cbs ipvx_o_mpls_parsing_enable_profile;
    algo_port_pp_db_port_pp_tpid_profile_egress_cbs port_pp_tpid_profile_egress;
    algo_port_pp_db_egress_acceptable_frame_type_profile_cbs egress_acceptable_frame_type_profile;
    algo_port_pp_db_egress_pp_port_sit_profile_cbs egress_pp_port_sit_profile;
    algo_port_pp_db_pp_port_lb_profile_cbs pp_port_lb_profile;
    algo_port_pp_db_force_forward_cbs force_forward;
    algo_port_pp_db_esem_cbs esem;
    algo_port_pp_db_recycle_app_cbs recycle_app;
} algo_port_pp_db_cbs;

/*
 * Global Variables
 */

/*
 * Global Variables
 */

extern algo_port_pp_db_cbs algo_port_pp_db;

#endif /* __ALGO_PORT_PP_ACCESS_H__ */
